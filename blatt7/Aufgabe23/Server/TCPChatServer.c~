
#include <sys/select.h>
#include <sys/time.h>

#include <stdio.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <unistd.h>
#include <arpa/inet.h>

#include "util.h"
#include <errno.h>
#include <string.h>
#include "unp_readline.h"


int prepare_socket(int portnum, int *tcp_sock)
{
	int err;
	struct sockaddr_in myaddr;

	myaddr.sin_family = AF_INET;
	myaddr.sin_port = htons(portnum);
	myaddr.sin_addr.s_addr = htonl(INADDR_ANY);
	
	*tcp_sock = socket(AF_INET,SOCK_STREAM,0);
	if(*tcp_sock < 0){
		return -1;
	}

	err = bind(*tcp_sock, (struct sockaddr*) &myaddr, sizeof(struct sockaddr_in));
	if(err < 0){
		return -2;	
	}

	/*Setting socket into passive mode*/
	err = listen(*tcp_sock, 5);
	if(err < 0){
		return -3;	
	}

	return 0;
}


int messaging(int sockfd, fd_set *readfds, int sock) {
	int err;
	int max_message_length = 300;
	int message_length;
	int i;

	/*read message*/
	char read_buff[max_message_length];
	err = readline(sockfd, read_buff, max_message_length);
	if(err < 0){
		ERROR("Could not read")	
	}
	if(err == 0){
		return -1;	
	}
	
	/*send message to all chatters */
	message_length = strlen(read_buff)+1;
	for (i = 0; i < FD_SETSIZE; i++) {  
		if (FD_ISSET (i, readfds)) {      	
            		if (i != sock) {
				err = write(i, read_buff, message_length); 
				if(err < 0){
					ERROR("Could not write")	
				}
			}
		}
		
	}
}



int main(int argc, char **argv) {

	int err;
	int portnumber;

	/*checking and getting input*/
	if(argc <2){
		ERROR("Not the right amount of input parameters\n Use like this: ./tcpserver 		'Portnumber'")
	}
	portnumber = atoi(argv[1]);

	if(portnumber < 0){
		ERROR("Invalid portnumber")	
	}

	printf("Server is going to handle requests on port %i\n", portnumber);

	/*prepare listening sockets ? */
	int sock;
	err = prepare_socket(portnumber, &sock);
	if (err == -1) {
		ERROR("Could not create socket\n")
		return 1;
	}
	if (err == -2) {
		ERROR("Could not bind socket\n")
		return 1;
	}
	if (err == -3) {
		ERROR("Could not put socket into listening mode\n")
		return 1;
	}
	



	/*making fd_set for listing open sockets and copies which can be worked on by select()*/
	fd_set readfds;
	FD_ZERO (&readfds);
  	FD_SET (sock, &readfds);
	fd_set work_readfds;
	int i;

	/*select loop with reading and sending messages */
	while(1) {
		work_readfds = readfds;
	
		/* look for input */
		err = select(FD_SETSIZE, &work_readfds, NULL , NULL, NULL);
		if(err < 0){
			ERROR("client is doing weird stuff")	
		}
		/*checking for input */
		for (i = 0; i < FD_SETSIZE; i++) {
        		if (FD_ISSET (i, &work_readfds)) {
            			if (i == sock) {
					/*someone wants to join the chat */
					int ans = FD_ISSET (sock, &work_readfds);
					if (ans > 0) {
						int newfd;
						struct sockaddr newchatter;
						socklen_t len;
						len = sizeof(newchatter);

						newfd = accept(sock, &newchatter, &len);
						if(newfd < 0) {
							ERROR("Could not accept")
						}
					
						/*Add to the fd_set */
						FD_SET (newfd, &readfds);

						printf(" Someone joined the chat \n");
					}	
				}
				/*new message or disconnecting*/
				else {
					err = messaging(i, &readfds, sock);
					/*closing sockets for diconnected clients and removing them 						from readfds*/					
					if (err <0) {                  			
                    				close (i);
                    				FD_CLR (i, &readfds);
						printf("someone left the chat\n");
                  			}
				}
			}
		}

	}

	/*closing socket */
	err = close(sock);

	if(err < 0){
		ERROR("Couldn't close socket")
	}

	return 0;
}
